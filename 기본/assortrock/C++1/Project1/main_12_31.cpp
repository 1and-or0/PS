#include <stdio.h>

/*
* ㅡㅡ 변수의 종류 ㅡㅡ
* 1. 지역변수(함수 끝나면 사라짐!)
* 2. 전역변수
* 3. 정적변수 (키워드: static 과 함께 사용)
* 4. 외부변수 (키워드: extern 과 함께 사용)
*/

/*
* ㅡㅡ 메모리 영역 ㅡㅡ  더 세분화 가능함, C++은 메모리를 자기가 관리하기 때문에 메모리 영역, 메모리 사용 현황을 잘 파악해야 함!
* 1. 스택 영역 (지역변수가 사용하는 영역 + 생겼다 사라지는 영역, 비영구적 영역!!)
* 2. 데이터 영역 (전역변수, 정적변수, 외부변수가 사용하는 영역)
* 3. 읽기 전용(코드, ROM)
* 4. 힙 영역
*/

/*
* ㅡㅡ 데이터 영역 특징 ㅡㅡ
* 프로그램이 시작 시 생성,
* 프로그램이 종료 시 해제
* 프로그램이 동작 중인 모든 순간 계속 생성되어 있는 것
*  
*/


// 전역변수 (생성되는 곳)
int g_i = 0; // 전체적으로 Data 영역에 선언됨

void Test()  // void는 함수의 반환 값(return)이 없는 경우에 적어주는 type임, void 단어 뜻: 아무것도 없다
{
	// main 함수의 지역변수 a에 100을 대입하라고 명령하고 싶지만 실상 
	// Test 함수의 지역변수 a에 100을 대입하라는 코드로 
	// Test 함수에 지역변수 a가 선언되어 있지 않으므로
	// 명령 수행 불가!
	// a = 100;

	// 반면 g_i는 어떤 메모리 영역이든 살아있는 전역변수임!
	++g_i;
}


void Test_2(); // 함수 선언만 해놓음


#include "func.h" 
// 참조를 통해 함수가 선언만 되어있음
// .exe 의 실행파일을 만드는 과정에서 link 작업을 통해 func.cpp에 작성된 코드가 복붙됨

// cpp와 h로 분할 구현하는 이유는
// 코드를 손쉽게 관리하기 위해서... 





// 정적변수 선언 - 정적 변수는 선언된 파일에서만 사용이 가능하다. 따라서 다른 파일과 무관하다
// 정적변수 초기화 구문은 가장 처음에만 실행되고 이후에 실행되지 않는다
// static int g_iStatic = 0;

#include "common.h"

int g_iExtern = 11;


int main()
{
	// 지역변수 (생성되는 곳)
	int a = 10;


	/*g_iStatic += 100;

	
	printf("\n%d ", g_iStatic);*/
	
	printf("\n%d\n", g_iExtern);

	Test();

	printing();
	

	Add(0, 0);

	Test();
	Test();

	Test_2(); // 함수 호출이 가능함. 함수 정의는 하지 않았지만 선언은 했기 때문

	return 0;
}

/// <summary>
/// 만약 Test_2라는 함수를 선언만 하고 따로 정의를 하지 않으면 link 단계에서 오류가남
/// 오류 코드: LNK 
/// 
/// 문법이 틀리면 컴파일 오류
/// 오류 코드: C
/// 
/// 
/// </summary>
void Test_2()
{
	++g_i;
}