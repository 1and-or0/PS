# 다이나믹 프로그래밍의 조건
# 1. 최적 부분 구조(Optimal Substructure)
#   큰 문제를 작은 문제로 나눌 수 있음. 작은 문제의 답을 모아 큰 문제를 해결 가능
# 2. 중복된 부분 문제(Overlapping Subproblem)
#   동일한 작은 문제를 반복적 해결을 요함

# ex)
# 피보나치 수열 - 1, 1, 2, 3, 5, 8, 13, 21,
# a의 n번째 항 = a의 n-1번째 항 + a의 n-2번째 항
# a의 1번째 항: 1, a의 2번째 항: 1
# 수열 sequence

# 피보나치 재귀함수로 구현 <- 지수 시간 복잡도
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)


print(fibo(4))

# 다이나믹 - TopDown (하향식), BottomUp (상향식)으로 나뉨
# TopDown 의 방식중 하나. 메모이제이션 (Memoization)
# 한 번 계산한 결과를 메모리 공간에 메모
# 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴
# 값을 기록해 놓는다는 점에서 캐싱(Caching)이라고도 함

# TopDown 재귀함수 이용 - ex) 피보나치 재귀함수
# 큰 문제를 해결하기 위해서 작은 문제들을 재귀적으로 호출
# 작은 문제들을 모두 해결하면 큰 문제에 대한 답 얻을 수 있도록 작성함
# 이러한 과정에서 한 번 계산한 결과값을 기록하기 위해 메모이제이션 활용

# BottomUp - 반복문 - ex) 피보나치 반복문
# 작은 문제들을 해결하며 그 값을 가지고 다음 문제를 해결함

# 다이나믹 프로그래밍 (= DP)의 전형적인 형태는 BottomUp 방식임
# 결과 저장용 배열(다른 언어), 리스트(파이썬)을 DP 테이블이라고 함
# 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미
# 메모이제이션은 DP에 국한된 개념은 아님
# 한 번 계산된 결과를 담아 놓기만 하고 DP을 위해 활용하지 않을 수도 있음
# 따라서 엄밀히 말하면 DP와 메모이제이션은 다른 것임



# 메모이제이션 이용하는 경우 시간 복잡도 O(N)으로 바뀜. 메모이제이션 사용하지 않은 경우 O(2^n)이었음
# 피보나치 - TopDown 다이나믹 프로그래밍 예시
d = [0] * 100


def fibo_dp(x):
    # 종료 조건
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]

    # 아직 계산하지 않은 문제라면 점화식에 따라 피보나치 결과 반환
    d[x] = fibo_dp(x - 1) + fibo_dp(x - 2)
    return d[x]

# 위의 경우 dp 테이블 d에 저장되어 있는 인덱스 0~2까지의 값은 활용하지 않음!
print(fibo_dp(99))


# 피보나치 - BottomUp 다이나믹 프로그래밍 예시
d1 = [0] * 100
d1[1], d1[2] = 1, 1
n = 99

# 피보나치 반복문으로 구현
for i in range(3, n++1):
    d1[i] = d1[i-1] + d1[i-2]

print(d1[n])


# 다이나믹 프로그래밍과 분할 정복
# 공통점 최적 부분 구조 - 큰 문제를 작은 문제로 나눠 해결 가능
# 차이점 DP의 경우 부분 문제의 중복이 있으나 분할 정복의 경우 중복이 없음
# 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않음
