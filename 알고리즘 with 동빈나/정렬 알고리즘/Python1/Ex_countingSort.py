# 매우 빠르게 동작하는 알고리즘
# 데이터 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능
# 데이터 개수: N, 데이터(양수) 최댓값: K, 최악의 경우에도 수행 시간 O(N+K)를 보장

# 계수 정렬 counting sort가 비효율적인 경우 = 데이터의 값이 극과 극으로 치우친 경우
# ex) 0과 999,999로 단 2개 존재하는 경우..
# 효율적인 경우 = 성적 처리 100점을 맞은 학생이 여러명일 수 있음
# 데이터 값의 범위가 고루 분포되며 특정 값이 여러번 등장할 수록 counting sort는 효율적이다!

# 모든 원소의 값 >= 0 이라고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)  # 인덱스는 무조건 0부터 시작함 vs 데이터는 무조건 0부터 시작한다는 보장x(1부터 시작할 수 있음) 따라서 + 1

for i in range(len(array)):
    count[array[i]] += 1

for i in range(len(count)):
    for j in range(count[i]):
        print(i, end=' ')