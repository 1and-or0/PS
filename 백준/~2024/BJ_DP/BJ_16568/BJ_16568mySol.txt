결론
n, a 만 있을 때, a = 2인 경우
ans(0) = 0
ans(1) = 1
ans(2) = 1
ans(3) = 1 == ans( (a+1) ) = 1
ans(4) = 2 == 1 + ans(1)
ans(5) = 3 == 1 + ans(2)
ans(6) = 2 == 1 + ans(3)
ans(7) = 3 == 1 + ans(4)
ans(8) = 4 == 1 + ans(5)


문제 단순화 접근
a b 두 개가 주어지나 
a만 주어질 때를 생각해보자
a=2로 주어진다
ans(N) 이 dp 테이블
ans(0) = 0, ans(1) = 1로 고정이다
ans(2) = 2이다.
ans(3) = 1이다. <= ans( (a+1) ) = 1이 된거다
ans(4) = 2이다. <= ans(1)
두명을 새치기하면 어떤 경우와 똑같아지는가?
ans(1)과 같아진다 즉 1+ans(1)이다.
1초 후 새치기를 했고, 
이후의 상황은 ans(1)과 같기 때문이다.
ans(5) = 3이다. <= 1+ans(2)
한명이 가고 1초 지나서 0초만에 두 명을 새치기하면,
ans(2)과 같은 상황이다.
왜냐하면 앞에 두명이 남아있음
ans(6) = 2 = 1+ans(3)
한명이 가고 1초 지나서 0초만에 두명을 새치기,
앞에 3명이 남음 ans(3)과 같은 상황임
한명이 가고 1초 지나서 0초만에 두명을 새치기 == 



<엔비스카의 영혼>

한길이 앞에
N명의 사람들 줄 서있음

1초가 지날 떄마다
줄의 맨 앞사람 집감

한길이 행동 - 1초
1. 기다리기 == -1
2. a명 앞으로 가기 == -a
    (앞에 최소 a명이 있을 때)
3. b명 앞으로 가기 == -b
    (앞에 최소 b명이 있을 때)

새치기는 0초만에 할 수 있음

ex
N = 5
a = 1, b = 2

1. 기다리기만 할 경우 - 5초

2. 한 명 집가고, 2명 앞으로 새치기,
    한 명 집가고, 1명 앞으로 새치기
    - 2초


y = 한길, x = 타인
초기 상태 
sec = 0
1 2 3 4 5 6
x x x x x y

새치기
1 2 3 4 5 6  
x x x y x x

sec = 1
앞 사람 간 후
1 2 3 4 5 
x x y x x

새치기
1 2 3 4 5 
x y x x x

sec = 2
앞 사람 간 후
1 2 3 4  
y x x x

2초만에 가장 앞에 섰다...

ㅡㅡㅡㅡㅡ ㅡㅡㅡㅡㅡ
a랑 b를 찾아야 하면 그리디인가?
가장 큰 a와
가장 큰 b를
ㅡㅡㅡㅡㅡ ㅡㅡㅡㅡㅡ

n = 0, a = 1, b = 2
sec = 0
1
y
ans(0) = 0 = 1번...? : 고정

n = 1, a = 1, b = 2
sec = 0
1 2
x y
sec = 0
1 2
x y
sec = 1
1
y
ans(1) = 1 = 1번 or 2번 = min(1번, 2번)

n = 2, a = 1, b = 2
sec = 0
1 2 3
x x y
sec = 0
1 2 3
x y x
-
sec = 1
1 2
y x
ans(2) = 1 = 2번 = min(1)

n = 2, a = 1, b = 2
sec = 0
1 2 3
x x y
sec = 0
1 2 3
y x x
-
sec = 1
1 2 3
y x x
ans(2) = 1 = 3번

n = 3, a = 1, b = 2
sec = 0
1 2 3 4
x x x y
sec = 0
1 2 3 4
x y x x
-
sec = 1
1 2
y x
ans(3) = 1 = 3번 + 1번

n = 4, a = 1, b = 2
sec = 0
1 2 3 4 5
x x x x y
sec = 0
1 2 3 4 5
x x y x x
-
sec = 1
1 2 3 4 5
x y x x
-
sec = 2
1 2 3 4 5
y x x
ans(4) = 2 = 3번 + 1번 

n = 5, a = 1, b = 2
sec = 0
1 2 3 4 5 6
x x x x x y
sec = 0
1 2 3 4 5 6
x x x y x x
-
sec = 1
1 2 3 4 5
x x y x x
sec = 1
1 2 3 4 5
x y x x x
-
sec = 2
1 2 3 4 5
y x x
ans(5) = 2 = 3번 + 2번 


종료조건
now == 0:
증감
N--
